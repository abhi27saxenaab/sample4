# Run migrations again
npx sequelize-cli db:migrate

# Seed the database
npx sequelize-cli db:seed:all

# Undo all migrations
npx sequelize-cli db:migrate:undo:all

cd backend
google kar

open kar config

npx sequelize-cli migration:create --name User

bhai naam le rha hai saaf pata chalega ki cheeting kar rha hai

/*"seed": "node seeders/seedCategories.js",*/



npx sequelize-cli model:generate --name Category1 --attributes firstName:string,lastName:string,email:string,password:string



npx sequelize-cli model:generate --name Category2 --attributes name:string,description:string





/ 1. Initialize state to store the fetched data and a loading indicator
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // 2. Use useEffect to perform the API call
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1'); // Replace with your API endpoint
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const result = await response.json();
        setData(result); // Set the fetched data in state
      } catch (err) {
        setError(err); // Handle errors
      } finally {
        setLoading(false); // Set loading to false after fetch attempt
      }
    };

    fetchData(); // Call the async function

    // Optional: Cleanup function if needed (e.g., to cancel pending requests)
    return () => {
      // Cleanup logic here
    };
  }, []);


